ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
xlab("p value")
# plot summary
ggplot(simulation_summary_T, aes(p)) +
geom_histogram(fill = "steelblue", color = "darkblue", bins = 30)+
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
xlab("p value")
# plot summary
ggplot(simulation_summary_T, aes(p)) +
geom_histogram(fill = "steelblue", color = "darkblue", bins = 25)+
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
xlab("p value")
# plot summary
ggplot(simulation_summary_T, aes(p)) +
geom_histogram(fill = "steelblue", color = "darkblue")+
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
xlab("p value")
#preparing the dataset for the plots
simulation_summary_T <- simulation |>
unnest(c(analysis_results_T, analysis_results_W), names_sep = "_") |>
rename(p_T = analysis_results_T_p,
p_W = analysis_results_W_p)|>
mutate(n_control = as.factor(n_control),
n_intervention = as.factor(n_intervention))|>
group_by(n_control, n_intervention)
#preparing the dataset for the plots
simulation_plots <- simulation |>
unnest(c(analysis_results_T, analysis_results_W), names_sep = "_") |>
rename(p_T = analysis_results_T_p,
p_W = analysis_results_W_p)|>
mutate(n_control = as.factor(n_control),
n_intervention = as.factor(n_intervention))|>
group_by(n_control, n_intervention)
# plot for the T Test
ggplot(simulation_plots, aes(p_T)) +
geom_histogram(fill = "steelblue", color = "darkblue") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
xlab("p value")
# plot for the W Test
ggplot(simulation_plots, aes(p_W)) +
geom_histogram(fill = "steelblue", color = "darkblue") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
xlab("p value")
# plot for the W Test
ggplot(simulation_plots, aes(p_W)) +
geom_histogram(fill = "lightyellow", color = "yellow") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
xlab("p value")
# plot for the W Test
ggplot(simulation_plots, aes(p_W)) +
geom_histogram(fill = "yellow", color = "darkyellow") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
xlab("p value")
# plot for the W Test
ggplot(simulation_plots, aes(p_W)) +
geom_histogram(fill = "yellow", color = "orange") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
xlab("p value")
# plot for the T Test
ggplot(simulation_plots, aes(p_T)) +
geom_histogram(fill = "steelblue", color = "darkblue") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
xlab("p value")
# plot for the W Test
ggplot(simulation_plots, aes(p_W)) +
geom_histogram(fill = "gold", color = "gold4") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
xlab("p value")
# plot for the T Test
ggplot(simulation_plots, aes(p_T)) +
geom_histogram(fill = "darkslategray2", color = "darkslategray4") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
xlab("p value")
# plot for the T Test
ggplot(simulation_plots, aes(p_T)) +
geom_histogram(fill = "darkslategray2", color = "darkslategray4") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
xlab("p value")
# plot for the W Test
ggplot(simulation_plots, aes(p_W)) +
geom_histogram(fill = "gold", color = "gold4") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
xlab("p value")
# plot for the T Test
ggplot(simulation_plots, aes(p_T)) +
geom_histogram(fill = "darkslategray2", color = "darkslategray4") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
ylim(0, 10) +
xlab("p value")
# plot for the W Test
ggplot(simulation_plots, aes(p_W)) +
geom_histogram(fill = "gold", color = "gold4") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
ylim(0, 10)+
xlab("p value")
# plot for the T Test
ggplot(simulation_plots, aes(p_T)) +
geom_histogram(fill = "darkslategray2", color = "darkslategray4") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
ylim(0, 10) +
xlab("p value")
library(tidyr)
?expand_grid
#Exampel
# Define parameter values
flips <- c(10, 20, 30)
prob_heads <- c(0.3, 0.5, 0.7)
# Create a data frame with all combinations
simulation_grid <- expand_grid(flips = flips, prob_heads = prob_heads)
# View the result
print(simulation_grid)
#Exampel
library(purrr)
?pmap
# Define a simulation function
simulate_coin_flip <- function(flips, prob_heads) {
# Your simulation logic here, e.g., using rbinom for coin flips
simulated_results <- rbinom(flips, 1, prob_heads)
# Return some summary or result of the simulation
return(list(flips = flips, prob_heads = prob_heads, result = sum(simulated_results)))
}
# Create a data frame with parameter combinations
parameter_grid <- expand_grid(flips = c(10, 20, 30), prob_heads = c(0.3, 0.5, 0.7))
# Apply simulation function to each set of parameters in parallel
simulation_results <- pmap(parameter_grid, simulate_coin_flip)
# View the results
print(simulation_results)
# # remove all objects from environment ----
rm(list = ls())
# dependencies ----
library(tidyr)
library(dplyr)
library(forcats)
library(readr)
library(purrr)
library(ggplot2)
library(effsize)
# set the seed ----
# for the pseudo random number generator to make results reproducible
set.seed(42)
# define data generating function ----
generate_data <- function(n_control,
n_intervention,
mean_control,
mean_intervention,
sd_control,
sd_intervention) {
data <-
bind_rows(
tibble(condition = "control",
score = rnorm(n = n_control, mean = mean_control, sd = sd_control)),
tibble(condition = "intervention",
score = rnorm(n = n_intervention, mean = mean_intervention, sd = sd_intervention))
) |>
# control's factor levels must be ordered so that intervention is the first level and control is the second
# this ensures that positive cohen's d values refer to intervention > control and not the other way around.
mutate(condition = fct_relevel(condition, "intervention", "control"))
return(data)
}
## T Test ~ added a _t to differ between the t-test and the welch test
# define data analysis function ----
analyse_data_t <- function(data) {
res_t_test <- t.test(formula = score ~ condition,
data = data,
var.equal = TRUE,
alternative = "two.sided")
res <- tibble(p = res_t_test$p.value)
return(res)
}
## copied the original analysis
## Welches' independent t-test --> set var.equal FALSE
## _w
# define data analysis function ----
analyse_data_w <- function(data) {
res_t_test <- t.test(formula = score ~ condition,
data = data,
var.equal = FALSE, # WELCH TEST
alternative = "two.sided")
res <- tibble(p = res_t_test$p.value)
return(res)
}
# define experiment parameters ----
# note: these are the correct ones I want you to simulate.
experiment_parameters_grid <- expand_grid(
n_control = 50, # notice that the two sample sizes are different
n_intervention = 25,
mean_control = 0, # notice that the two means are both 0: the population difference in means is null.
mean_intervention = 0,
sd_control = 0.66, # notice that the two sample variances (via SDs) are different
sd_intervention = 1.33,
iteration = 1:100 # the final simulation needs lots of p values for a good plot
)
# run simulation ----
simulation <-
# using the experiment parameters
experiment_parameters_grid |>
# generate data using the data generating function and the parameters relevant to data generation
mutate(generated_data = pmap(list(n_control,
n_intervention,
mean_control,
mean_intervention,
sd_control,
sd_intervention),
generate_data)) |>
# apply the analysis function to the generated data using the parameters relevant to analysis
## added another column for the p-values from the Welch Test
mutate(analysis_results_T = pmap(list(generated_data),
analyse_data_t),
analysis_results_W = pmap(list(generated_data),
analyse_data_w))
# summarise simulation results over the iterations ----
## estimate power
## ie what proportion of p values are significant (< .05)
#unnested both analysis, than renamed the columns
#I think? I calculated the false positive rate?
simulation_summary <- simulation |>
unnest(c(analysis_results_T, analysis_results_W), names_sep = "_") |>
rename(p_T = analysis_results_T_p,
p_W = analysis_results_W_p)|>
mutate(n_control = as.factor(n_control),
n_intervention = as.factor(n_intervention))|>
group_by(n_control, n_intervention)  |>
summarize(false_pos_T = mean(p_T < 0.05),
false_pos_W = mean(p_W < 0.05),
.groups = "drop")
#preparing the dataset for the plots
simulation_plots <- simulation |>
unnest(c(analysis_results_T, analysis_results_W), names_sep = "_") |>
rename(p_T = analysis_results_T_p,
p_W = analysis_results_W_p)|>
mutate(n_control = as.factor(n_control),
n_intervention = as.factor(n_intervention))|>
group_by(n_control, n_intervention)
# plot for the T Test
ggplot(simulation_plots, aes(p_T)) +
geom_histogram(fill = "darkslategray2", color = "darkslategray4") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
ylim(0, 10) +
xlab("p value")
# plot for the W Test
ggplot(simulation_plots, aes(p_W)) +
geom_histogram(fill = "gold", color = "gold4") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
ylim(0, 10)+
xlab("p value")
sessionInfo()
#Exampel
library(purrr)
#?pmap
# Define a simulation function
simulate_coin_flip <- function(flips, prob_heads) {
# Your simulation logic here, e.g., using rbinom for coin flips
explain_simulated_results <- rbinom(flips, 1, prob_heads)
# Return some summary or result of the simulation
return(list(flips = flips, prob_heads = prob_heads, result = sum(explain_simulated_results)))
}
# Create a data frame with parameter combinations
explain_parameter_grid <- expand_grid(flips = c(10, 20, 30), prob_heads = c(0.3, 0.5, 0.7))
# Apply simulation function to each set of parameters in parallel
explain_simulation_results <- pmap(explain_parameter_grid, simulate_coin_flip)
# # remove all objects from environment ----
rm(list = ls())
library(tidyr)
#?expand_grid
#Exampel
# Define parameter values
flips <- c(10, 20, 30)
prob_heads <- c(0.3, 0.5, 0.7)
# Create a data frame with all combinations
explain_simulation_grid <- expand_grid(flips = flips, prob_heads = prob_heads)
# View the result
print(explain_simulation_grid)
library(tidyr)
#?expand_grid
#Exampel
# Define parameter values
flips <- c(10, 20, 30)
prob_heads <- c(0.3, 0.5, 0.7)
# Create a data frame with all combinations
explain_simulation_grid <- expand_grid(flips = flips, prob_heads = prob_heads)
#Exampel
library(purrr)
#?pmap
# Define a simulation function
simulate_coin_flip <- function(flips, prob_heads) {
# Your simulation logic here, e.g., using rbinom for coin flips
explain_simulated_results <- rbinom(flips, 1, prob_heads)
# Return some summary or result of the simulation
return(list(flips = flips, prob_heads = prob_heads, result = sum(explain_simulated_results)))
}
# Create a data frame with parameter combinations
explain_parameter_grid <- expand_grid(flips = c(10, 20, 30), prob_heads = c(0.3, 0.5, 0.7))
# Apply simulation function to each set of parameters in parallel
explain_simulation_results <- pmap(explain_parameter_grid, simulate_coin_flip)
# # remove all objects from environment ----
rm(list = ls())
# dependencies ----
library(tidyr)
library(dplyr)
library(forcats)
library(readr)
library(purrr)
library(ggplot2)
library(effsize)
# set the seed ----
# for the pseudo random number generator to make results reproducible
set.seed(42)
library(tidyr)
#?expand_grid
#Exampel
# Define parameter values
flips <- c(10, 20, 30)
prob_heads <- c(0.3, 0.5, 0.7)
# Create a data frame with all combinations
explain_simulation_grid <- expand_grid(flips = flips, prob_heads = prob_heads)
#Exampel
library(purrr)
#?pmap
# Define a simulation function
simulate_coin_flip <- function(flips, prob_heads) {
# Your simulation logic here, e.g., using rbinom for coin flips
explain_simulated_results <- rbinom(flips, 1, prob_heads)
# Return some summary or result of the simulation
return(list(flips = flips, prob_heads = prob_heads, result = sum(explain_simulated_results)))
}
# Create a data frame with parameter combinations
explain_parameter_grid <- expand_grid(flips = c(10, 20, 30), prob_heads = c(0.3, 0.5, 0.7))
# Apply simulation function to each set of parameters in parallel
explain_simulation_results <- pmap(explain_parameter_grid, simulate_coin_flip)
# # remove all objects from environment ----
rm(list = ls())
# dependencies ----
library(tidyr)
library(dplyr)
library(forcats)
library(readr)
library(purrr)
library(ggplot2)
library(effsize)
# set the seed ----
# for the pseudo random number generator to make results reproducible
set.seed(42)
# define data generating function ----
generate_data <- function(n_control,
n_intervention,
mean_control,
mean_intervention,
sd_control,
sd_intervention) {
data <-
bind_rows(
tibble(condition = "control",
score = rnorm(n = n_control, mean = mean_control, sd = sd_control)),
tibble(condition = "intervention",
score = rnorm(n = n_intervention, mean = mean_intervention, sd = sd_intervention))
) |>
# control's factor levels must be ordered so that intervention is the first level and control is the second
# this ensures that positive cohen's d values refer to intervention > control and not the other way around.
mutate(condition = fct_relevel(condition, "intervention", "control"))
return(data)
}
## T Test ~ added a _t to differ between the t-test and the welch test
# define data analysis function ----
analyse_data_t <- function(data) {
res_t_test <- t.test(formula = score ~ condition,
data = data,
var.equal = TRUE,
alternative = "two.sided")
res <- tibble(p = res_t_test$p.value)
return(res)
}
# Welches' independent t-test --> set var.equal FALSE
# define data analysis function ----
analyse_data_w <- function(data) {
res_t_test <- t.test(formula = score ~ condition,
data = data,
var.equal = FALSE, # WELCH TEST
alternative = "two.sided")
res <- tibble(p = res_t_test$p.value)
return(res)
}
# define experiment parameters ----
# note: these are the correct ones I want you to simulate.
experiment_parameters_grid <- expand_grid(
n_control = 50, # notice that the two sample sizes are different
n_intervention = 25,
mean_control = 0, # notice that the two means are both 0: the population difference in means is null.
mean_intervention = 0,
sd_control = 0.66, # notice that the two sample variances (via SDs) are different
sd_intervention = 1.33,
iteration = 1:1000 # the final simulation needs lots of p values for a good plot
)
# run simulation ----
simulation <-
# using the experiment parameters
experiment_parameters_grid |>
# generate data using the data generating function and the parameters relevant to data generation
mutate(generated_data = pmap(list(n_control,
n_intervention,
mean_control,
mean_intervention,
sd_control,
sd_intervention),
generate_data)) |>
# apply the analysis function to the generated data using the parameters relevant to analysis
## added another column for the p-values from the Welch Test
mutate(analysis_results_T = pmap(list(generated_data),
analyse_data_t),
analysis_results_W = pmap(list(generated_data),
analyse_data_w))
# summarise simulation results over the iterations ----
## estimate power
## ie what proportion of p values are significant (< .05)
simulation_summary <- simulation |>
unnest(c(analysis_results_T, analysis_results_W), names_sep = "_") |>
rename(p_T = analysis_results_T_p,
p_W = analysis_results_W_p)|>
mutate(n_control = as.factor(n_control),
n_intervention = as.factor(n_intervention))|>
group_by(n_control, n_intervention)  |>
summarize(false_pos_T = mean(p_T < 0.05),
false_pos_W = mean(p_W < 0.05),
.groups = "drop")
#preparing the dataset for the plots
simulation_plots <- simulation |>
unnest(c(analysis_results_T, analysis_results_W), names_sep = "_") |>
rename(p_T = analysis_results_T_p,
p_W = analysis_results_W_p)|>
mutate(n_control = as.factor(n_control),
n_intervention = as.factor(n_intervention))|>
group_by(n_control, n_intervention)
# plot for the T Test
ggplot(simulation_plots, aes(p_T)) +
geom_histogram(fill = "darkslategray2", color = "darkslategray4") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
ylim(0, 10) +
xlab("p value")
# plot for the W Test
ggplot(simulation_plots, aes(p_W)) +
geom_histogram(fill = "gold", color = "gold4") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
ylim(0, 10)+
xlab("p value")
# plot for the W Test
ggplot(simulation_plots, aes(p_W)) +
geom_histogram(fill = "gold", color = "gold4") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
xlab("p value")
# plot for the T Test
ggplot(simulation_plots, aes(p_T)) +
geom_histogram(fill = "darkslategray2", color = "darkslategray4") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
xlab("p value")
# plot for the W Test
ggplot(simulation_plots, aes(p_W)) +
geom_histogram(fill = "gold", color = "gold4") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
ylim(0, 70) +
xlab("p value")
# plot for the T Test
ggplot(simulation_plots, aes(p_T)) +
geom_histogram(fill = "darkslategray2", color = "darkslategray4") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
ylim(0, 70) +
xlab("p value")
gplot(simulation_plots, aes(p_T)) +
geom_histogram(fill = "darkslategray2", color = "darkslategray4") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
ylim(0, 65) +
xlab("p value")
# plot for the T Test
ggplot(simulation_plots, aes(p_T)) +
geom_histogram(fill = "darkslategray2", color = "darkslategray4") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
ylim(0, 65) +
xlab("p value")
# plot for the W Test
ggplot(simulation_plots, aes(p_W)) +
geom_histogram(fill = "gold", color = "gold4") +
ggtitle("distribution of p values for the T-Test") +
ylab("frequencies")+
ylim(0, 65) +
xlab("p value")
library(ggplot)
library(purrr)
