# # remove all objects from environment ----
# rm(list = ls())
# dependencies ----
library(tidyr)
library(dplyr)
library(forcats)
library(readr)
library(purrr)
library(ggplot2)
library(effsize)
install.packages("effsize")
library(effsize)
# # remove all objects from environment ----
# rm(list = ls())
# dependencies ----
library(tidyr)
library(dplyr)
library(forcats)
library(readr)
library(purrr)
library(ggplot2)
library(effsize)
# set the seed ----
# for the pseudo random number generator to make results reproducible
set.seed(42)
# define data generating function ----
generate_data <- function(n_control,
n_intervention,
mean_control,
mean_intervention,
sd_control,
sd_intervention) {
data <-
bind_rows(
tibble(condition = "control",
score = rnorm(n = n_control, mean = mean_control, sd = sd_control)),
tibble(condition = "intervention",
score = rnorm(n = n_intervention, mean = mean_intervention, sd = sd_intervention))
) |>
# control's factor levels must be ordered so that intervention is the first level and control is the second
# this ensures that positive cohen's d values refer to intervention > control and not the other way around.
mutate(condition = fct_relevel(condition, "intervention", "control"))
return(data)
}
# define data analysis function ----
analyse_data <- function(data) {
# dependencies
require(effsize)
res_t_test <- t.test(formula = score ~ condition,
data = data,
var.equal = TRUE,
alternative = "two.sided")
res_cohens_d <- effsize::cohen.d(formula = score ~ condition,  # new addition: also fit cohen's d
within = FALSE,
data = data)
res <- tibble(p = res_t_test$p.value,
cohens_d = res_cohens_d$estimate,  # new addition: save cohen's d and its 95% CIs to the results tibble
cohens_d_ci_lower = res_cohens_d$conf.int["lower"],
cohens_d_ci_upper = res_cohens_d$conf.int["upper"])
return(res)
}
# define experiment parameters ----
# note: these are the correct ones I want you to simulate.
experiment_parameters_grid <- expand_grid(
n_control = 50, # notice that the two sample sizes are different
n_intervention = 25,
mean_control = 0, # notice that the two means are both 0: the population difference in means is null.
mean_intervention = 0,
sd_control = 0.66, # notice that the two sample variances (via SDs) are different
sd_intervention = 1.33,
iteration = 1:5000 # the final simulation needs lots of p values for a good plot
)
# run simulation ----
simulation <-
# using the experiment parameters
experiment_parameters_grid |>
# generate data using the data generating function and the parameters relevant to data generation
mutate(generated_data = pmap(list(n_control,
n_intervention,
mean_control,
mean_intervention,
sd_control,
sd_intervention),
generate_data)) |>
# apply the analysis function to the generated data using the parameters relevant to analysis
mutate(analysis_results = pmap(list(generated_data),
analyse_data))
View(analyse_data)
View(generate_data)
# summarise simulation results over the iterations ----
## estimate power
## ie what proportion of p values are significant (< .05)
simulation_summary <- simulation |>
unnest(analysis_results) |>
mutate(n_control = as.factor(n_control),
n_intervention = as.factor(n_intervention),
true_effect = paste("Cohen's d =", mean_intervention)) |>
group_by(n_control,
n_intervention,
true_effect) |>
summarize(power = mean(p < .05),
mean_cohens_d_precision = mean((cohens_d_ci_upper - cohens_d_ci_lower)/2),
.groups = "drop")
